//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ClientCategories {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }

      /**
     * @return Success
     */
       getCategories(): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Categories/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategories(_response);
        });
    }

    protected processGetCategories(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getCategories2(id: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Categories/get2?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategories2(_response);
        });
    }

    protected processGetCategories2(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postCategories(body: Category | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Categories/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostCategories(_response);
        });
    }

    protected processPostCategories(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    putCategories(body: Category | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Categories/put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutCategories(_response);
        });
    }

    protected processPutCategories(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param oProduc (optional) 
     * @return Success
     */
    delCategories(oProduc: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Categories/del?";
        if (oProduc === null)
            throw new Error("The parameter 'oProduc' cannot be null.");
        else if (oProduc !== undefined)
            url_ += "oProduc=" + encodeURIComponent("" + oProduc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelCategories(_response);
        });
    }

    protected processDelCategories(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

}


export class ClientClientes {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }

    
    /**
     * @return Success
     */
     getClientes(): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Clientes/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClientes(_response);
        });
    }

    protected processGetClientes(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getClientes2(id: string | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Clientes/get2?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClientes2(_response);
        });
    }

    protected processGetClientes2(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postClientes(body: Customer | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Clientes/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostClientes(_response);
        });
    }

    protected processPostClientes(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delClientes(id: string | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Clientes/del?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelClientes(_response);
        });
    }

    protected processDelClientes(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    putClientes(body: Customer | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Clientes/put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutClientes(_response);
        });
    }

    protected processPutClientes(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

}

export class ClientEmployees {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }
    
    /**
     * @return Success
     */
     getEmployeed(): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Employeed/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmployeed(_response);
        });
    }

    protected processGetEmployeed(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getEmployeed2(id: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Employeed/get2?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEmployeed2(_response);
        });
    }

    protected processGetEmployeed2(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postEmployeed(body: Employee | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Employeed/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostEmployeed(_response);
        });
    }

    protected processPostEmployeed(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    putEmployeed(body: Employee | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Employeed/put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutEmployeed(_response);
        });
    }

    protected processPutEmployeed(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param oProduc (optional) 
     * @return Success
     */
    delEmployeed(oProduc: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Employeed/del?";
        if (oProduc === null)
            throw new Error("The parameter 'oProduc' cannot be null.");
        else if (oProduc !== undefined)
            url_ += "oProduc=" + encodeURIComponent("" + oProduc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelEmployeed(_response);
        });
    }

    protected processDelEmployeed(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

}  

export class ClientOrders {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }

     /**
     * @return Success
     */
      getOrder(): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Order/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrder(_response);
        });
    }

    protected processGetOrder(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrder2(id: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Order/get2?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrder2(_response);
        });
    }

    protected processGetOrder2(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postOrder(body: Order | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Order/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostOrder(_response);
        });
    }

    protected processPostOrder(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    putOrder(body: Order | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Order/put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutOrder(_response);
        });
    }

    protected processPutOrder(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param oProduc (optional) 
     * @return Success
     */
    delOrder(oProduc: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Order/del?";
        if (oProduc === null)
            throw new Error("The parameter 'oProduc' cannot be null.");
        else if (oProduc !== undefined)
            url_ += "oProduc=" + encodeURIComponent("" + oProduc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelOrder(_response);
        });
    }

    protected processDelOrder(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

}
export class ClientProducts {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }
       /**
     * @return Success
     */
        getProducto(): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Producto/get";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetProducto(_response);
            });
        }
    
        protected processGetProducto(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param id (optional) 
         * @return Success
         */
        getProducto2(id: number | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Producto/get2?";
            if (id === null)
                throw new Error("The parameter 'id' cannot be null.");
            else if (id !== undefined)
                url_ += "id=" + encodeURIComponent("" + id) + "&";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetProducto2(_response);
            });
        }
    
        protected processGetProducto2(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param body (optional) 
         * @return Success
         */
        postProducto(body: Product | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Producto/post";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPostProducto(_response);
            });
        }
    
        protected processPostProducto(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param body (optional) 
         * @return Success
         */
        putProducto(body: Product | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Producto/put";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPutProducto(_response);
            });
        }
    
        protected processPutProducto(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param oProduc (optional) 
         * @return Success
         */
        delProducto(oProduc: number | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Producto/del?";
            if (oProduc === null)
                throw new Error("The parameter 'oProduc' cannot be null.");
            else if (oProduc !== undefined)
                url_ += "oProduc=" + encodeURIComponent("" + oProduc) + "&";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "DELETE",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processDelProducto(_response);
            });
        }
    
        protected processDelProducto(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
}
export class ClientShippers {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }

    
    /**
     * @return Success
     */
     getShipper(): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Shipper/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetShipper(_response);
        });
    }

    protected processGetShipper(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getShipper2(id: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Shipper/get2?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetShipper2(_response);
        });
    }

    protected processGetShipper2(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    postShipper(body: Shipper | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Shipper/post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostShipper(_response);
        });
    }

    protected processPostShipper(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    putShipper(body: Shipper | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Shipper/put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutShipper(_response);
        });
    }

    protected processPutShipper(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

    /**
     * @param oProduc (optional) 
     * @return Success
     */
    delShipper(oProduc: number | undefined): Promise<ApiResult> {
        let url_ = this.baseUrl + "/api/Shipper/del?";
        if (oProduc === null)
            throw new Error("The parameter 'oProduc' cannot be null.");
        else if (oProduc !== undefined)
            url_ += "oProduc=" + encodeURIComponent("" + oProduc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelShipper(_response);
        });
    }

    protected processDelShipper(response: Response): Promise<ApiResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResult>(null as any);
    }

}
export class ClientSuppliers {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7146";
    }
       /**
     * @return Success
     */
        getSuppliers(): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Suppliers/get";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetSuppliers(_response);
            });
        }
    
        protected processGetSuppliers(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param id (optional) 
         * @return Success
         */
        getSuppliers2(id: number | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Suppliers/get2?";
            if (id === null)
                throw new Error("The parameter 'id' cannot be null.");
            else if (id !== undefined)
                url_ += "id=" + encodeURIComponent("" + id) + "&";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "GET",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processGetSuppliers2(_response);
            });
        }
    
        protected processGetSuppliers2(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param body (optional) 
         * @return Success
         */
        postSuppliers(body: Supplier | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Suppliers/post";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPostSuppliers(_response);
            });
        }
    
        protected processPostSuppliers(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param body (optional) 
         * @return Success
         */
        putSuppliers(body: Supplier | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Suppliers/put";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processPutSuppliers(_response);
            });
        }
    
        protected processPutSuppliers(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
    
        /**
         * @param oProduc (optional) 
         * @return Success
         */
        delSuppliers(oProduc: number | undefined): Promise<ApiResult> {
            let url_ = this.baseUrl + "/api/Suppliers/del?";
            if (oProduc === null)
                throw new Error("The parameter 'oProduc' cannot be null.");
            else if (oProduc !== undefined)
                url_ += "oProduc=" + encodeURIComponent("" + oProduc) + "&";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_: RequestInit = {
                method: "DELETE",
                headers: {
                    "Accept": "text/plain"
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processDelSuppliers(_response);
            });
        }
    
        protected processDelSuppliers(response: Response): Promise<ApiResult> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiResult.fromJS(resultData200);
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<ApiResult>(null as any);
        }
}


export class ApiResult implements IApiResult {
    ok?: boolean;
    msg?: string | undefined;
    data?: any | undefined;
    col?: string[] | undefined;
    rows?: any[] | undefined;

    constructor(data?: IApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["ok"];
            this.msg = _data["msg"];
            this.data = _data["data"];
            if (Array.isArray(_data["col"])) {
                this.col = [] as any;
                for (let item of _data["col"])
                    this.col!.push(item);
            }
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(item);
            }
        }
    }

    static fromJS(data: any): ApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ok"] = this.ok;
        data["msg"] = this.msg;
        data["data"] = this.data;
        if (Array.isArray(this.col)) {
            data["col"] = [];
            for (let item of this.col)
                data["col"].push(item);
        }
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item);
        }
        return data;
    }
}

export interface IApiResult {
    ok?: boolean;
    msg?: string | undefined;
    data?: any | undefined;
    col?: string[] | undefined;
    rows?: any[] | undefined;
}

export class Category implements ICategory {
    categoryId?: number;
    categoryName?: string | undefined;
    description?: string | undefined;
    picture?: number | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.description = _data["description"];
            this.picture = _data["picture"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["description"] = this.description;
        data["picture"] = this.picture;
        return data;
    }
}

export interface ICategory {
    categoryId?: number;
    categoryName?: string | undefined;
    description?: string | undefined;
    picture?: number | undefined;
}

export class Customer implements ICustomer {
    customerId!: string;
    companyName!: string;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.companyName = _data["companyName"];
            this.contactName = _data["contactName"];
            this.contactTitle = _data["contactTitle"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        return data;
    }
}

export interface ICustomer {
    customerId: string;
    companyName: string;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
}

export class Employee implements IEmployee {
    employeeId?: number;
    lastName?: string | undefined;
    firstName?: string | undefined;
    title?: string | undefined;
    titleOfCourtesy?: string | undefined;
    birthDate?: Date | undefined;
    hireDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    extension?: string | undefined;
    photo?: number | undefined;
    notes?: string | undefined;
    reportsTo?: number | undefined;
    photoPath?: string | undefined;

    constructor(data?: IEmployee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeId = _data["employeeId"];
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.title = _data["title"];
            this.titleOfCourtesy = _data["titleOfCourtesy"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            this.address = _data["address"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.homePhone = _data["homePhone"];
            this.extension = _data["extension"];
            this.photo = _data["photo"];
            this.notes = _data["notes"];
            this.reportsTo = _data["reportsTo"];
            this.photoPath = _data["photoPath"];
        }
    }

    static fromJS(data: any): Employee {
        data = typeof data === 'object' ? data : {};
        let result = new Employee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["title"] = this.title;
        data["titleOfCourtesy"] = this.titleOfCourtesy;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["homePhone"] = this.homePhone;
        data["extension"] = this.extension;
        data["photo"] = this.photo;
        data["notes"] = this.notes;
        data["reportsTo"] = this.reportsTo;
        data["photoPath"] = this.photoPath;
        return data;
    }
}

export interface IEmployee {
    employeeId?: number;
    lastName?: string | undefined;
    firstName?: string | undefined;
    title?: string | undefined;
    titleOfCourtesy?: string | undefined;
    birthDate?: Date | undefined;
    hireDate?: Date | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    homePhone?: string | undefined;
    extension?: string | undefined;
    photo?: number | undefined;
    notes?: string | undefined;
    reportsTo?: number | undefined;
    photoPath?: string | undefined;
}

export class Order implements IOrder {
    orderId?: number;
    customerId?: string | undefined;
    employeeId?: number | undefined;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.customerId = _data["customerId"];
            this.employeeId = _data["employeeId"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.requiredDate = _data["requiredDate"] ? new Date(_data["requiredDate"].toString()) : <any>undefined;
            this.shippedDate = _data["shippedDate"] ? new Date(_data["shippedDate"].toString()) : <any>undefined;
            this.shipVia = _data["shipVia"];
            this.freight = _data["freight"];
            this.shipName = _data["shipName"];
            this.shipAddress = _data["shipAddress"];
            this.shipCity = _data["shipCity"];
            this.shipRegion = _data["shipRegion"];
            this.shipPostalCode = _data["shipPostalCode"];
            this.shipCountry = _data["shipCountry"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["customerId"] = this.customerId;
        data["employeeId"] = this.employeeId;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requiredDate"] = this.requiredDate ? this.requiredDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["shipVia"] = this.shipVia;
        data["freight"] = this.freight;
        data["shipName"] = this.shipName;
        data["shipAddress"] = this.shipAddress;
        data["shipCity"] = this.shipCity;
        data["shipRegion"] = this.shipRegion;
        data["shipPostalCode"] = this.shipPostalCode;
        data["shipCountry"] = this.shipCountry;
        return data;
    }
}

export interface IOrder {
    orderId?: number;
    customerId?: string | undefined;
    employeeId?: number | undefined;
    orderDate?: Date | undefined;
    requiredDate?: Date | undefined;
    shippedDate?: Date | undefined;
    shipVia?: number | undefined;
    freight?: number | undefined;
    shipName?: string | undefined;
    shipAddress?: string | undefined;
    shipCity?: string | undefined;
    shipRegion?: string | undefined;
    shipPostalCode?: string | undefined;
    shipCountry?: string | undefined;
}

export class Product implements IProduct {
    productId?: number;
    productName?: string | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    quantityPerUnit?: string | undefined;
    unitPrice?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    reorderLevel?: number | undefined;
    discontinued?: boolean;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.supplierId = _data["supplierId"];
            this.categoryId = _data["categoryId"];
            this.quantityPerUnit = _data["quantityPerUnit"];
            this.unitPrice = _data["unitPrice"];
            this.unitsInStock = _data["unitsInStock"];
            this.unitsOnOrder = _data["unitsOnOrder"];
            this.reorderLevel = _data["reorderLevel"];
            this.discontinued = _data["discontinued"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["supplierId"] = this.supplierId;
        data["categoryId"] = this.categoryId;
        data["quantityPerUnit"] = this.quantityPerUnit;
        data["unitPrice"] = this.unitPrice;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["reorderLevel"] = this.reorderLevel;
        data["discontinued"] = this.discontinued;
        return data;
    }
}

export interface IProduct {
    productId?: number;
    productName?: string | undefined;
    supplierId?: number | undefined;
    categoryId?: number | undefined;
    quantityPerUnit?: string | undefined;
    unitPrice?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    reorderLevel?: number | undefined;
    discontinued?: boolean;
}

export class Shipper implements IShipper {
    shipperId?: number;
    companyName?: string | undefined;
    phone?: string | undefined;
    orders?: Order[] | undefined;

    constructor(data?: IShipper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipperId = _data["shipperId"];
            this.companyName = _data["companyName"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Shipper {
        data = typeof data === 'object' ? data : {};
        let result = new Shipper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipperId"] = this.shipperId;
        data["companyName"] = this.companyName;
        data["phone"] = this.phone;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShipper {
    shipperId?: number;
    companyName?: string | undefined;
    phone?: string | undefined;
    orders?: Order[] | undefined;
}

export class Supplier implements ISupplier {
    supplierId?: number;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    products?: Product[] | undefined;

    constructor(data?: ISupplier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.supplierId = _data["supplierId"];
            this.companyName = _data["companyName"];
            this.contactName = _data["contactName"];
            this.contactTitle = _data["contactTitle"];
            this.address = _data["address"];
            this.city = _data["city"];
            this.region = _data["region"];
            this.postalCode = _data["postalCode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
            this.fax = _data["fax"];
            this.homePage = _data["homePage"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Supplier {
        data = typeof data === 'object' ? data : {};
        let result = new Supplier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supplierId"] = this.supplierId;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["contactTitle"] = this.contactTitle;
        data["address"] = this.address;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postalCode"] = this.postalCode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["fax"] = this.fax;
        data["homePage"] = this.homePage;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISupplier {
    supplierId?: number;
    companyName?: string | undefined;
    contactName?: string | undefined;
    contactTitle?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    homePage?: string | undefined;
    products?: Product[] | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}